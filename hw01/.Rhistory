scores
# read in a maptimes condump
filename <- 'C:/quake2/jump/condumps/scores.txt'
# read in condump
scores <- scan(filename, what = 'raw', sep = '\n')
scores2 <- c()
i <- 1
for(x in scores) {
if(grepl('^\\d', x)) {
scores2[i] <- x
i <- i + 1
}
}
# write to a new text file for cleaner reading
write.table(scores2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
# read in new text file
scores <- read.table('cleaned.txt', header = FALSE)
scores <- scores[1:2]
#assign point values
points <- c(15:1)
scores$points <- points[scores$V1]
# aggregate the points for each person
scorescount <- aggregate(scores$points, by = list(scores$V2), FUN = length)
scores <- aggregate(scores$points, by = list(scores$V2), FUN = sum)
scores <- merge(x = scores, y = scorescount, by = "Group.1")
colnames(scores) = c('name','points','maps')
# calc avg finish
scores$avg.finish <- 16 - round(scores$points / scores$maps, 1)
# order by score
scores <- scores[order(scores$points, decreasing = TRUE),]
rownames(scores) <- NULL
scores
# read in a maptimes condump
filename <- 'C:/quake2/jump/condumps/scores.txt'
# read in condump
scores <- scan(filename, what = 'raw', sep = '\n')
scores2 <- c()
i <- 1
for(x in scores) {
if(grepl('^\\d', x)) {
scores2[i] <- x
i <- i + 1
}
}
# write to a new text file for cleaner reading
write.table(scores2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
# read in new text file
scores <- read.table('cleaned.txt', header = FALSE)
scores <- scores[1:2]
#assign point values
points <- c(15:1)
scores$points <- points[scores$V1]
# aggregate the points for each person
scorescount <- aggregate(scores$points, by = list(scores$V2), FUN = length)
scores <- aggregate(scores$points, by = list(scores$V2), FUN = sum)
scores <- merge(x = scores, y = scorescount, by = "Group.1")
colnames(scores) = c('name','points','maps')
# calc avg finish
scores$avg.finish <- 16 - round(scores$points / scores$maps, 1)
# order by score
scores <- scores[order(scores$points, decreasing = TRUE),]
rownames(scores) <- NULL
scores
# read in a maptimes condump
filename <- 'C:/quake2/jump/condumps/scores.txt'
# read in condump
scores <- scan(filename, what = 'raw', sep = '\n')
scores2 <- c()
i <- 1
for(x in scores) {
if(grepl('^\\d', x)) {
scores2[i] <- x
i <- i + 1
}
}
# write to a new text file for cleaner reading
write.table(scores2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
# read in new text file
scores <- read.table('cleaned.txt', header = FALSE)
scores <- scores[1:2]
#assign point values
points <- c(15:1)
scores$points <- points[scores$V1]
# aggregate the points for each person
scorescount <- aggregate(scores$points, by = list(scores$V2), FUN = length)
scores <- aggregate(scores$points, by = list(scores$V2), FUN = sum)
scores <- merge(x = scores, y = scorescount, by = "Group.1")
colnames(scores) = c('name','points','maps')
# calc avg finish
scores$avg.finish <- 16 - round(scores$points / scores$maps, 1)
# order by score
scores <- scores[order(scores$points, decreasing = TRUE),]
rownames(scores) <- NULL
scores
# read in a maptimes condump
filename <- 'C:/quake2/jump/condumps/scores.txt'
# read in condump
scores <- scan(filename, what = 'raw', sep = '\n')
scores2 <- c()
i <- 1
for(x in scores) {
if(grepl('^\\d', x)) {
scores2[i] <- x
i <- i + 1
}
}
# write to a new text file for cleaner reading
write.table(scores2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
# read in new text file
scores <- read.table('cleaned.txt', header = FALSE)
scores <- scores[1:2]
#assign point values
points <- c(15:1)
scores$points <- points[scores$V1]
# aggregate the points for each person
scorescount <- aggregate(scores$points, by = list(scores$V2), FUN = length)
scores <- aggregate(scores$points, by = list(scores$V2), FUN = sum)
scores <- merge(x = scores, y = scorescount, by = "Group.1")
colnames(scores) = c('name','points','maps')
# calc avg finish
scores$avg.finish <- 16 - round(scores$points / scores$maps, 1)
# order by score
scores <- scores[order(scores$points, decreasing = TRUE),]
rownames(scores) <- NULL
scores
scores[1,2]
scores[4,2]
scores[4,2] <- 80
scores
# read in a maptimes condump
filename <- 'C:/quake2/jump/condumps/scores.txt'
# read in condump
scores <- scan(filename, what = 'raw', sep = '\n')
scores2 <- c()
i <- 1
for(x in scores) {
if(grepl('^\\d', x)) {
scores2[i] <- x
i <- i + 1
}
}
# write to a new text file for cleaner reading
write.table(scores2, 'cleaned.txt', row.names = FALSE, col.names = FALSE, quote = FALSE)
# read in new text file
scores <- read.table('cleaned.txt', header = FALSE)
scores <- scores[1:2]
#assign point values
points <- c(15:1)
scores$points <- points[scores$V1]
# aggregate the points for each person
scorescount <- aggregate(scores$points, by = list(scores$V2), FUN = length)
scores <- aggregate(scores$points, by = list(scores$V2), FUN = sum)
scores <- merge(x = scores, y = scorescount, by = "Group.1")
colnames(scores) = c('name','points','maps')
# calc avg finish
scores$avg.finish <- 16 - round(scores$points / scores$maps, 1)
# order by score
scores <- scores[order(scores$points, decreasing = TRUE),]
rownames(scores) <- NULL
scores
data(pima, package="faraway")
install.packages("faraway")
data(pima, package="faraway")
data(pima, package="faraway")
head(pima)
require("plyr")
require("knitr")
require("psych")
training <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-training-data.csv'))
metadata <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-metadata.csv'))
kable(metadata)
columns <- colnames(training)
target <- "TARGET_WINS"
inputs <- columns[!columns %in% c(target,"INDEX")]
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- summary$n/nrow(training)
kable(summary)
require("reshape2")
require("ggplot2")
ggplot(melt(training, measure.vars = c(target,inputs))
,aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
setwd("~/GitHub/DATA621/hw01")
opts_chunk$set(echo = TRUE)
par(mfrow=c(1,3))
ggplot(melt(training, measure.vars = c(target,inputs))
,aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
ggplot(melt(data.frame(scale(training)), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
ggplot(melt(data.frame(scale(log(training))), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
require("gridextra")
install.packages("gridextra")
install.packages("gridExtra")
require("gridExtra")
ggplot(melt(data.frame(scale(training)), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+ geom_boxplot() + coord_flip() + ggtitle("Normalized Distribution")
g1 <- ggplot(melt(training, measure.vars = c(target,inputs))
,aes(x=variable,y=value)
)+ geom_boxplot() + coord_flip() + ggtitle("Raw Distribution")
g2 <- ggplot(melt(data.frame(scale(training)), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+ geom_boxplot() + coord_flip() + ggtitle("Normalized Distribution")
g3 <- ggplot(melt(data.frame(scale(log(training))), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+geom_boxplot() + coord_flip() + ggtitle("Log Distribution")
grid.arrange(g1, g2, g3, ncol = 1, main = "Variable Distribution")
grid.arrange(g1, g2, g3, ncol = 1, top = "Variable Distribution")
grid.arrange(g1, g2, g3, ncol = 3, top = "Variable Distribution")
summary$n <- NULL
summary
summary$n/nrow(training)
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- summary$n/nrow(training)
summary$n <- NULL
kable(summary)
summary$n/nrow(training)
training <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-training-data.csv'))
metadata <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-metadata.csv'))
columns <- colnames(training)
target <- "TARGET_WINS"
inputs <- columns[!columns %in% c(target,"INDEX")]
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- summary$n/nrow(training)
summary$n/nrow(training)
round(summary$n/nrow(training),2)
training <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-training-data.csv'))
metadata <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-metadata.csv'))
columns <- colnames(training)
target <- "TARGET_WINS"
inputs <- columns[!columns %in% c(target,"INDEX")]
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- round(summary$n/nrow(training),2)
summary$n <- NULL
kable(summary)
cor
base_cor
base_cor <- cor(training[,c(target,inputs)], use="pairwise.complete.obs", method="kendall")
base_cor
base_cor[1,]
kable(base_cor[1,])
base_cor <- data.frame(base_cor[1,])
base_cor
base_cor <- data.frame(r = base_cor[1,])
kable()
kable(base_cor)
base_cor <- data.frame(r = base_cor[1,])
base_cor <- cor(training[,c(target,inputs)], use="pairwise.complete.obs", method="kendall")
base_cor <- data.frame(r = base_cor[1,])
kable(base_cor)
kable(t(base_cor))
qplot(base_cor)
require("MASS")
model <- lm(TARGET_WINS~1,data=valid_data)
summary(model)
plot(model)
model0 <- model
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
require("plyr")
require("knitr")
require("psych")
# Let's load the data
training <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-training-data.csv'))
metadata <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-metadata.csv'))
kable(metadata)
columns <- colnames(training)
target <- "TARGET_WINS"
inputs <- columns[!columns %in% c(target,"INDEX")]
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- summary$n/nrow(training)
kable(summary)
# Chunk 3
require("reshape2")
require("ggplot2")
# Let's melt the DF so that we can plot it more easily
ggplot(melt(training, measure.vars = c(target,inputs))
,aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 4
require("reshape2")
require("ggplot2")
# Let's melt the DF so that we can plot it more easily
ggplot(melt(data.frame(scale(training)), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 5
ggplot(melt(data.frame(scale(log(training))), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 6
pairs(~.,data=training[,c(target,inputs)],
main="Scatterplot Matrix")
# LEt's see the correlation matrix
kable(cor(training[,c(target,inputs)], use="pairwise.complete.obs", method="kendall") )
# Chunk 7
# and a refression on the raw data to see what comes out of it
complete_cols <- row.names( summary[summary$completeness == 1,])
complete_cols <- c(complete_cols[complete_cols!=target])
training_transformed <- training[,c(target,complete_cols)]
# make up for missing TEAM_BATTING_SO
training[is.na(training$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- median(training$TEAM_BATTING_SO, na.rm = TRUE)
training_transformed$TEAM_BATTING_SO <- training$TEAM_BATTING_SO
# make up for missing TEAM_BASERUN_SB
training[is.na(training$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- median(training$TEAM_BASERUN_SB, na.rm = TRUE)
training_transformed$TEAM_BASERUN_SB <- training$TEAM_BASERUN_SB
# make up for missing TEAM_PITCHING_SO
training[is.na(training$TEAM_PITCHING_SO),]$TEAM_PITCHING_SO <- median(training$TEAM_PITCHING_SO, na.rm = TRUE)
training_transformed$TEAM_PITCHING_SO <- training$TEAM_PITCHING_SO
# make up for missing TEAM_FIELDING_DP
training[is.na(training$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- median(training$TEAM_FIELDING_DP, na.rm = TRUE)
training_transformed$TEAM_FIELDING_DP <- training$TEAM_FIELDING_DP
# make up for missing TEAM_BASERUN_CS
#training[is.na(training$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS  <- median(training$TEAM_BASERUN_CS, na.rm = TRUE)
#training_transformed$TEAM_BASERUN_CS <- training$TEAM_BASERUN_CS
#training_transformed$TEAM_BATTING_1B <- (training_transformed$TEAM_BATTING_2B-training_transformed$TEAM_BATTING_3B+training_transformed$TEAM_BATTING_HR)
# validation algo
#training_transformed$INVALID <- FALSE
#training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_1B < 811 | training_transformed$TEAM_BATTING_1B>1338
#length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- FALSE
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_2B < 110 | training_transformed$TEAM_BATTING_2B>376
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_3B < 11 | training_transformed$TEAM_BATTING_3B>153
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_HR < 3 | training_transformed$TEAM_BATTING_HR>264
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_H < 935 | training_transformed$TEAM_BATTING_H>2131
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_SO < 308 | training_transformed$TEAM_BATTING_SO>1535
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_PITCHING_SO < 308 | training_transformed$TEAM_PITCHING_SO>1535
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_BB < 282 | training_transformed$TEAM_BATTING_BB>835
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_PITCHING_BB < 282 | training_transformed$TEAM_PITCHING_BB>835
length(training_transformed$INVALID[training_transformed$INVALID])
#training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BASERUN_CS < 8 | training_transformed$TEAM_BASERUN_CS>191
#length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BASERUN_SB < 13 | training_transformed$TEAM_BASERUN_SB>638
length(training_transformed$INVALID[training_transformed$INVALID])
#training_transformed <- training_transformed[!training_transformed$INVALID,]
#training_transformed$TEAM_BATTING_1B <- training_transformed$TEAM_BATTING_1B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_2B <- training_transformed$TEAM_BATTING_2B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_3B <- training_transformed$TEAM_BATTING_3B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_HR <- training_transformed$TEAM_BATTING_HR/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_PITCHING_HR <- training_transformed$TEAM_PITCHING_HR/training_transformed$TEAM_PITCHING_H
library(MASS)
valid_data <- training_transformed[!training_transformed$INVALID&complete.cases(training_transformed),colnames(training_transformed)[!colnames(training_transformed) %in% c("INVALID")]]
# Chunk 8
model <- lm(TARGET_WINS~1,data=valid_data)
summary(model)
plot(model)
plot(model)
summary(model)
source_cols <- colnames(model_data)
source_cols <- source_cols[source_cols!="TARGET_WINS"]
powers <- lapply(source_cols,function(x){getBoxCoxCoef(model_data[,x],model_data$TARGET_WINS^y_power)})
params <- c(unlist(powers),y_power)
kable(data.frame(variable=c(source_cols,"TARGET_WINS"),power=params))
power_transforms <- data.frame(t(apply(model_data,1,function(c) { c^params})))
#model <- lm(TARGET_WINS~.,data=power_transforms[,colnames(power_transforms)[!colnames(power_transforms) %in% c("TEAM_PITCHING_H","TEAM_BATTING_H")]])
#summary(model)
model <- lm(TARGET_WINS~.+0,power_transforms)
summary(model)
plot(model)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
require("plyr")
require("knitr")
require("psych")
# Let's load the data
training <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-training-data.csv'))
metadata <- read.csv(url('https://raw.githubusercontent.com/rmalarc/DATA621/master/hw01/moneyball-metadata.csv'))
kable(metadata)
columns <- colnames(training)
target <- "TARGET_WINS"
inputs <- columns[!columns %in% c(target,"INDEX")]
summary <- describe(training[,c(target,inputs)])[,c("n","mean","sd","median","max","min")]
summary$completeness <- summary$n/nrow(training)
kable(summary)
# Chunk 3
require("reshape2")
require("ggplot2")
# Let's melt the DF so that we can plot it more easily
ggplot(melt(training, measure.vars = c(target,inputs))
,aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 4
require("reshape2")
require("ggplot2")
# Let's melt the DF so that we can plot it more easily
ggplot(melt(data.frame(scale(training)), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 5
ggplot(melt(data.frame(scale(log(training))), measure.vars = c(target,inputs)),
aes(x=variable,y=value)
)+
geom_boxplot() +
coord_flip()
# Chunk 6
pairs(~.,data=training[,c(target,inputs)],
main="Scatterplot Matrix")
# LEt's see the correlation matrix
kable(cor(training[,c(target,inputs)], use="pairwise.complete.obs", method="kendall") )
# Chunk 7
# and a refression on the raw data to see what comes out of it
complete_cols <- row.names( summary[summary$completeness == 1,])
complete_cols <- c(complete_cols[complete_cols!=target])
training_transformed <- training[,c(target,complete_cols)]
# make up for missing TEAM_BATTING_SO
training[is.na(training$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- median(training$TEAM_BATTING_SO, na.rm = TRUE)
training_transformed$TEAM_BATTING_SO <- training$TEAM_BATTING_SO
# make up for missing TEAM_BASERUN_SB
training[is.na(training$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- median(training$TEAM_BASERUN_SB, na.rm = TRUE)
training_transformed$TEAM_BASERUN_SB <- training$TEAM_BASERUN_SB
# make up for missing TEAM_PITCHING_SO
training[is.na(training$TEAM_PITCHING_SO),]$TEAM_PITCHING_SO <- median(training$TEAM_PITCHING_SO, na.rm = TRUE)
training_transformed$TEAM_PITCHING_SO <- training$TEAM_PITCHING_SO
# make up for missing TEAM_FIELDING_DP
training[is.na(training$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- median(training$TEAM_FIELDING_DP, na.rm = TRUE)
training_transformed$TEAM_FIELDING_DP <- training$TEAM_FIELDING_DP
# make up for missing TEAM_BASERUN_CS
#training[is.na(training$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS  <- median(training$TEAM_BASERUN_CS, na.rm = TRUE)
#training_transformed$TEAM_BASERUN_CS <- training$TEAM_BASERUN_CS
#training_transformed$TEAM_BATTING_1B <- (training_transformed$TEAM_BATTING_2B-training_transformed$TEAM_BATTING_3B+training_transformed$TEAM_BATTING_HR)
# validation algo
#training_transformed$INVALID <- FALSE
#training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_1B < 811 | training_transformed$TEAM_BATTING_1B>1338
#length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- FALSE
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_2B < 110 | training_transformed$TEAM_BATTING_2B>376
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_3B < 11 | training_transformed$TEAM_BATTING_3B>153
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_HR < 3 | training_transformed$TEAM_BATTING_HR>264
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_H < 935 | training_transformed$TEAM_BATTING_H>2131
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_SO < 308 | training_transformed$TEAM_BATTING_SO>1535
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_PITCHING_SO < 308 | training_transformed$TEAM_PITCHING_SO>1535
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BATTING_BB < 282 | training_transformed$TEAM_BATTING_BB>835
length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_PITCHING_BB < 282 | training_transformed$TEAM_PITCHING_BB>835
length(training_transformed$INVALID[training_transformed$INVALID])
#training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BASERUN_CS < 8 | training_transformed$TEAM_BASERUN_CS>191
#length(training_transformed$INVALID[training_transformed$INVALID])
training_transformed$INVALID <- training_transformed$INVALID | training_transformed$TEAM_BASERUN_SB < 13 | training_transformed$TEAM_BASERUN_SB>638
length(training_transformed$INVALID[training_transformed$INVALID])
#training_transformed <- training_transformed[!training_transformed$INVALID,]
#training_transformed$TEAM_BATTING_1B <- training_transformed$TEAM_BATTING_1B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_2B <- training_transformed$TEAM_BATTING_2B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_3B <- training_transformed$TEAM_BATTING_3B/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_BATTING_HR <- training_transformed$TEAM_BATTING_HR/training_transformed$TEAM_BATTING_H
#training_transformed$TEAM_PITCHING_HR <- training_transformed$TEAM_PITCHING_HR/training_transformed$TEAM_PITCHING_H
library(MASS)
valid_data <- training_transformed[!training_transformed$INVALID&complete.cases(training_transformed),colnames(training_transformed)[!colnames(training_transformed) %in% c("INVALID")]]
# Chunk 8
model <- lm(TARGET_WINS~1,data=valid_data)
summary(model)
plot(model)
# Chunk 9
model <- lm(TARGET_WINS~.+0,data=valid_data)
summary(model)
plot(model)
# Chunk 10
getBoxCoxCoef<-function(x,y){
if (min(x)<=0){1} else {
d<-boxcox(x~y, plotit = FALSE)
d <- data.frame(d)
max_x <- d[d$y == max(d$y),]$x
if (abs(max_x)<=(1/3)) 1 else max_x
}
}
model_data <- valid_data
d<-boxcox(TARGET_WINS+0.0001~.,data=model_data, plotit = FALSE)
d <- data.frame(d)
y_power <- d[d$y == max(d$y),]$x
y_power
model_data$TARGET_WINS <- with(model_data,TARGET_WINS^y_power)
model <- lm(TARGET_WINS~.+0,data=model_data)
summary(model)
plot(model)
c(model0,model1)
