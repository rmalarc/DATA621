inputs_bin <- columns[grep("_BIN",columns)]
inputs_num <- columns[!columns %in% c(target,"INDEX",inputs_bin)]
inputs<- c(inputs_bin,inputs_num)
# impute
impute <- function (d) {
d[is.na(d$ResidualSugar),]$ResidualSugar <- median(d$ResidualSugar,na.rm = TRUE)
d[is.na(d$Chlorides),]$Chlorides <- median(d$Chlorides,na.rm = TRUE)
d[is.na(d$FreeSulfurDioxide),]$FreeSulfurDioxide <- median(d$FreeSulfurDioxide,na.rm = TRUE)
d[is.na(d$TotalSulfurDioxide),]$TotalSulfurDioxide <- median(d$TotalSulfurDioxide,na.rm = TRUE)
d[is.na(d$pH),]$pH <- median(d$pH,na.rm = TRUE)
d[is.na(d$Sulphates),]$Sulphates <- median(d$Sulphates,na.rm = TRUE)
d[is.na(d$Alcohol),]$Alcohol <- median(d$Alcohol,na.rm = TRUE)
d
}
training_trans<-impute(training_trans)
evaluation_trans<-impute(evaluation_trans)
numResponse <- function(col,d){
data <- d
data <- data[order(data[,col]),c(col,target_lm)]
x <- data[,col]
y <- data[,target_lm]
plot(y~cut(x,5), main=paste0("TARGET ~ ",col," Boxplot"),xlab=col, ylab="TARGET")
plot(y~x, main=paste0("TARGET ~ ",col),xlab=col, ylab="TARGET")
}
sapply(inputs_num,function(x){numResponse(x,training_trans)})
#sapply(inputs_num,function(x){numResponse(x,evaluation_trans)})
hist(training_trans[,target_lm])
d<- training_trans
capColumns <- function(d){
outputCols<- colnames(d)
#* Cap AcidicIndex at 11.8
d[d$AcidIndex <0, 'AcidIndex'] <- 0
d[d$AcidIndex >=11.8, 'AcidIndex'] <- 11.8
d
}
training_trans <- capColumns(training_trans)
evaluation_trans <- capColumns(evaluation_trans)
summary <- describe(training_trans[,c(target,inputs)])[,c("n","mean","sd","median","min","max")]
summary$completeness <- summary$n/nrow(training_trans)
summary$cv <- 100*summary$sd/summary$mean
kable(summary)
require("reshape2")
require("ggplot2")
detach(package:plyr)
require("dplyr")
training_normalized <- cbind(data.frame(scale(training_trans[,inputs_num])),training_trans[,c(inputs_bin,target)])
training_normalized$TARGET_FLAG <- training_normalized$TARGET > median(training_normalized$TARGET)
#training_normalized$TARGET_CUT <- cut(training_normalized$TARGET,2)
bin_summary <- melt(training_normalized[,c(inputs_bin,"TARGET_FLAG")], measure.vars = inputs_bin) %>%
group_by(TARGET_FLAG,variable) %>%
summarise(pct = sum(value)/length(value))
ggplot(bin_summary, aes(variable, pct)) +
geom_bar(aes(fill = TARGET_FLAG), position = "dodge", stat="identity")+
guides(fill=guide_legend(title="Number of Cases Purchased Above Median")) +
theme(legend.position="bottom")+
coord_flip()+
labs(title="Boxplot of Cost of Number of Cases Purchased ~ Binary Predictors", y="Percent", x="Predictor")
summary_positive <- describe(training_normalized[training_normalized$TARGET_FLAG,c(target_bin,inputs)])[,c("mean","n")]
summary_negative <- describe(training_normalized[!training_normalized$TARGET_FLAG,c(target_bin,inputs)])[,c("mean","n")]
summary_by_target <- merge(summary_positive,summary_negative,by="row.names")
colnames(summary_by_target) <- c("Variable","Above Median Cases Purchased - Avg","Above Median Cases Purchased - n","Below Median Cases Purchased - Avg", "Below Median Cases Purchased - n")
summary_by_target$delta <- abs(summary_by_target[,"Above Median Cases Purchased - Avg"]-summary_by_target[,"Below Median Cases Purchased - Avg"])
kable(summary_by_target[order(-summary_by_target$delta),])
summary_positive <- describe(training_normalized[training_normalized$TARGET_FLAG,c(target_bin,inputs)])[,c("mean","n")]
summary_negative <- describe(training_normalized[!training_normalized$TARGET_FLAG,c(target_bin,inputs)])[,c("mean","n")]
summary_by_target <- merge(summary_positive,summary_negative,by="row.names")
colnames(summary_by_target) <- c("Variable","Above Median Cases Purchased - Avg","Above Median Cases Purchased - n","Below Median Cases Purchased - Avg", "Below Median Cases Purchased - n")
summary_by_target$delta <- abs(summary_by_target[,"Above Median Cases Purchased - Avg"]-summary_by_target[,"Below Median Cases Purchased - Avg"])
kable(summary_by_target[order(-summary_by_target$delta),])
library(caTools)
train_rows <- sample.split(training_trans$TARGET_FLAG, SplitRatio=0.7)
training_trans_model_bin <- training_trans[train_rows,]
training_trans_eval_bin <- training_trans[-train_rows,]
head(training_trans)
training_trans$TARGET_FLAG
train_rows <- sample.split(training_trans$TARGET, SplitRatio=0.7)
training_trans_model_bin <- training_trans[train_rows,]
training_trans_eval_bin <- training_trans[-train_rows,]
library(MASS)
#Model0 - Full Model
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans)
summary(poisson)
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans[,-c("FixedAcidity", "CitricAcid", "ResidualSugar",
"Density", "pH")])
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans[,c("FixedAcidity", "CitricAcid", "ResidualSugar",
"Density", "pH")])
View(summary_positive)
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans[,c("TARGET", "FixedAcidity", "CitricAcid", "ResidualSugar",
"Density", "pH")])
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans[,c("TARGET", "FixedAcidity", "CitricAcid",
"ResidualSugar", "Density", "pH")])
summary(poisson)
training_trans[,c("TARGET", "FixedAcidity", "CitricAcid",
"ResidualSugar", "Density", "pH")]
training_trans[,1]
head(training_trans[,1])
head(training_trans)
training_trans_reduced <- subset(training_trans, select = -rem)
rem <- c("FixedAcidity", "CitricAcid", "ResidualSugar", "Density", "pH")
training_trans_reduced <- subset(training_trans, select = -rem)
training_trans_reduced <- subset(training_trans, select = c("FixedAcidity", "CitricAcid", "ResidualSugar", "Density", "pH"))
head(training_trans_reduced)
training_trans_reduced <- subset(training_trans, select = -c("FixedAcidity", "CitricAcid", "ResidualSugar", "Density", "pH"))
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
head(training_trans_reduced)
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans)
summary(poisson)
clear()
poisson <- glm(TARGET ~ . , family = poisson, data = training_trans)
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson)
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson)
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol))
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
#Model1 - Reduced Model
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
#Model2 - Significant Reduced Model (removing even more things
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson)
AIC(poisson)
BIC(poisson)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
poisson <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson)
reduced_model <- glm(TARGET ~ FixedAcidity + CitricAcid + ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, family = "poisson", data = training_trans)
summary(reduced_model)
sig_reduced_model <- glm(reduced_model <- glm(TARGET ~ ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, family = "poisson", data = training_trans))
summary(sig_reduced_model)
reduced_model <- glm(TARGET ~ FixedAcidity + CitricAcid + ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, family = "poisson", data = training_trans)
summary(reduced_model)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
#Model2 - Significant Reduced Model, got rid of even slightly insig variables
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
BIC(poisson2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
BIC(poisson0)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
neg_binomial1 <- glm.nb(TARGET ~ ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, data = training_trans)
summary(neg_binomial1)
neg_binomial2 <- glm.nb(TARGET ~ ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, data = training_trans)
summary(neg_binomial2)
neg_binomial1 <- glm.nb(TARGET ~ . , family = "binomial",  data = training_trans)
neg_binomial1 <- glm.nb(TARGET ~ . ,  data = training_trans)
summary(neg_binomial1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
neg_binomial2 <- glm.nb(TARGET ~ . ,  data = training_trans_reduced)
summary(neg_binomial2)
mlr1 <- glm(TARGET ~ . , data = training_trans)
summary(mlr1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
mlr2 <- glm(TARGET ~ . , data = training_trans_reduced)
summary(mlr2)
BIC(neg_binomial1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
mlr2 <- glm(TARGET ~ . , data = training_trans_reduced)
summary(mlr2)
BIC(mlr2)
BIC(poisson0)
BIC(neg_binomial1)
BIC(neg_binomial2)
BIC(mlr1)
BIC(mlr2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
mlr1 <- glm(TARGET ~ . , data = training_trans)
summary(mlr1)
BIC(mlr1)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide,
TotalSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
plot(poisson0)
m3 <- summary(poisson2)
confusion_matrix <- function(d){
data.frame(tp=nrow(d[d$class==1 & d$scored.class==1,]),
tn=nrow(d[d$class==0 & d$scored.class==0,]),
fp=nrow(d[d$class==0 & d$scored.class==1,]),
fn=nrow(d[d$class==1 & d$scored.class==0,])
)
}
accuracy<-function(d){
f <- confusion_matrix(d)
(f$tp+f$tn)/(f$tp+f$fp+f$tn+f$fn)
}
classification_error_rate<-function(d){
f <- confusion_matrix(d)
(f$fp+f$fn)/(f$tp+f$fp+f$tn+f$fn)
}
precision_c<-function(d){
f <- confusion_matrix(d)
(f$tp)/(f$tp+f$fp)
}
sensitivity_c<-function(d){
f <- confusion_matrix(d)
(f$tp)/(f$tp+f$fn)
}
specificity_c<-function(d){
f <- confusion_matrix(d)
(f$tn)/(f$tn+f$fp)
}
f1_score<-function(d){
p<- precision_c(d)
s<- sensitivity_c(d)
2*p*s/(p+s)
}
d<- data.frame(class=training_trans_eval_bin$TARGET_FLAG, scored.class=ifelse(predict2>0.5,1,0))
training_trans_model_bin
training_trans
len(training_trans)
length(training_trans)
dim(training_trans)
dim(training_trans_model_bin)
dim(training_trans_eval_bin)
predict2 <- round(predict(poisson2,evaluation_trans , type = 'response'), 4)
predict2
length(predict2)
d<- data.frame(class=training_trans_eval_bin$TARGET_FLAG, scored.class=ifelse(predict2>0.5,1,0))
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
training_trans_eval_bin
predict2 <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
require("pROC")
d_roc <- roc(training_trans_eval_bin$TARGET_FLAG,predict2)
d_roc <- roc(training_trans_eval_bin$TARGET,predict2)
plot(d_roc, main = "ROC with pROC")
table(training_trans$TARGET)
summary(training_trans$TARGET)
training_trans$TARGET
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
head(d)
confusion_matrix(d)
head(d, 50)
head(predict)
round(head(predict),1)
round(head(predict),0)
predict <- round(predict(poisson2,training_eval_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0))
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
d<-null
d<-NULL
d
head(predict)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict,0))
confusion_matrix(d)
accuracy(d)
round(predict,0)
head(d)
nrow(d$class == d$scored.class)
nrow(d[d$class == d$scored.class)]
nrow(d[d$class == d$scored.class])
nrow(d[d$class == d$scored.class,])
nrow(d)
nrow(d[d$class >= d$scored.class-1 && d$class <= d$scored.class+1,])
nrow(d[d$class <= d$scored.class-1 && d$class >= d$scored.class+1,])
nrow(d[d$class == d$scored.class,]) / nrow(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
diff_sq <- (predict - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
diff_sq <- (predict2 - mean(training_trans_eval_bin$TARGET))^2
sd <- mean(sqrt(diff_sq))
sd
diff_sq <- (predict2 - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
se
round(predict(poisson3, evaluation_trans ,type = 'response'), 4)
round(predict(poisson2, evaluation_trans ,type = 'response'), 4)
predict2[predict2 == 1]
head(predict2)
head(training_trans_eval_bin)
head(training_trans_eval_bin$TARGET)
training_trans_eval_bin$TARGET[training_trans_eval_bin$TARGET == 1]
qq <- rbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
colnames(qq) <- c("real", "predict")
head(qq)
summary(qq)
qq1 <- qq[real == 1]
qq1 <- qq["real" == 1]
qq1
qq1 <- qq["real" == 1,]
qq1
qq1 <- qq[qq$real == 1,]
qq1 <- subset(qq, real == 1)
qq1 <- subset(qq, "real" == 1)
qq1
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq <- data.frame((training_trans_eval_bin$TARGET, predict2))
qq <- data.frame(cbind(training_trans_eval_bin$TARGET, predict2))
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq1
qq0 <- qq[which(qq$real == 0),]
qq1 <- qq[which(qq$real == 1),]
qq2 <- qq[which(qq$real == 2),]
qq3 <- qq[which(qq$real == 3),]
qq4 <- qq[which(qq$real == 4),]
qq5 <- qq[which(qq$real == 5),]
qq6 <- qq[which(qq$real == 6),]
qq7 <- qq[which(qq$real == 7),]
qq8 <- qq[which(qq$real == 8),]
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
myse(predict2, training_trans_eval_bin$TARGET)
mysd(qq0$predict, qq0$real)
table(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
data.frame(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
myse(qq0$predict, qq0$real)
mysd(qq0$predict, qq0$real)
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
#functions for sd and se
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
mysd(qq0$predict, qq0$real)
qq0$predict
qq0$real
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
rbind(
myse(qq0$predict, qq0$real),
myse(qq1$predict, qq1$real),
myse(qq2$predict, qq2$real),
myse(qq3$predict, qq3$real),
myse(qq4$predict, qq4$real),
myse(qq5$predict, qq5$real),
myse(qq6$predict, qq6$real),
myse(qq7$predict, qq7$real),
myse(qq8$predict, qq8$real)
)
setwd("~/GitHub/DATA621/final")
